{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":11307,"status":"ok","timestamp":1744244306519,"user":{"displayName":"QI WEN CHONG","userId":"16772422287666141854"},"user_tz":-480},"id":"PzFsN7VCDm0d"},"outputs":[],"source":["import pandas as pd\n","from sklearn.metrics.pairwise import cosine_similarity\n","import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"5TFzXwJ5LajX"},"outputs":[{"name":"stdout","output_type":"stream","text":["Selected Song Index: 0\n","Similarity Matrix Shape: (1941, 1941)\n","\n","Selected Song: Set Fire to the Rain by Adele\n","\n","Recommended Songs:\n","- Left Outside Alone by Anastacia\n","- Shut Up by Black Eyed Peas\n","- Fetish (feat. Gucci Mane) by Selena Gomez\n","- Love Story by Taylor Swift\n","- Tripping by Robbie Williams\n","- Destination Calabria - Radio Edit by Alex Gaudino\n","- Without You (feat. Sandro Cavazza) by Avicii\n","- Freek-A-Leek by Petey Pablo\n","- You're All I Have by Snow Patrol\n","- I Would Like by Zara Larsson\n"]}],"source":["def load_data(file_path):\n","    try:\n","        df = pd.read_csv(file_path)\n","        return df\n","    except FileNotFoundError:\n","        print(f\"Error: File not found at {file_path}\")\n","        return None\n","    except Exception as e:\n","        print(f\"Error loading data: {e}\")\n","        return None\n","\n","def preprocess_data(df):\n","    try:\n","        df = df.dropna()  # Drop rows with any missing values\n","        df = df.drop_duplicates() #drop duplicates\n","\n","        # One-hot encode 'mode' and 'genre'\n","        df = pd.get_dummies(df, columns=['mode', 'genre'], drop_first=True)\n","\n","        # Select features for similarity calculation\n","        feature_list = ['danceability', 'energy', 'key', 'loudness',\n","                          'speechiness', 'acousticness', 'instrumentalness',\n","                          'liveness', 'valence', 'tempo']\n","        if not all(feature in df.columns for feature in feature_list):\n","            print(\"Error: Not all required features are present in the DataFrame.\")\n","            return None\n","\n","        df_features = df[feature_list]\n","        return df, df_features\n","    except KeyError as e:\n","        print(f\"Error: Key not found in DataFrame: {e}\")\n","        return None\n","    except Exception as e:\n","        print(f\"Error preprocessing data: {e}\")\n","        return None\n","\n","def calculate_similarity(df_features):\n","    try:\n","        similarity_matrix = cosine_similarity(df_features)\n","        return similarity_matrix\n","    except Exception as e:\n","        print(f\"Error calculating similarity: {e}\")\n","        return None\n","\n","def recommend_songs(song_name, artist_name, df, similarity_matrix, num_recommendations=10):\n","    try:\n","        processed_song_name = song_name.lower()\n","        processed_artist_name = artist_name.lower()\n","\n","        if artist_name:\n","            comparison_result = (df['song'].str.lower().str.contains(processed_song_name)) \u0026 (\n","                df['artist'].str.lower().str.contains(processed_artist_name)\n","            )\n","        else:\n","            comparison_result = df['song'].str.lower().str.contains(processed_song_name)\n","\n","        matching_songs = df[comparison_result]\n","\n","        if matching_songs.empty:\n","            print(f\"Song '{song_name}' by '{artist_name}' not found in the dataset.\")\n","            return None\n","\n","        # If multiple matches, use the first one.\n","        selected_song_index = matching_songs.index[0]\n","        selected_song = matching_songs.iloc[0]['song']\n","        selected_artist = matching_songs.iloc[0]['artist']\n","\n","        print(f\"Selected Song Index: {selected_song_index}\")  # Debugging\n","        print(f\"Similarity Matrix Shape: {similarity_matrix.shape}\")  # Debugging\n","\n","        # Get the similarity scores for the song\n","        similarity_scores = similarity_matrix[selected_song_index]\n","\n","        # Sort the songs by similarity (most similar first)\n","        similar_song_indices = np.argsort(similarity_scores)[::-1]\n","\n","        # Exclude the input song itself\n","        similar_song_indices = similar_song_indices[1:]\n","\n","        # Get the top N recommendations\n","        top_n_indices = similar_song_indices[:num_recommendations]\n","        recommended_songs = df.iloc[top_n_indices]['song'].tolist()\n","        recommended_artists = df.iloc[top_n_indices]['artist'].tolist()\n","        return selected_song, selected_artist, list(zip(recommended_songs, recommended_artists))  # Return a list of tuples (song, artist)\n","    except Exception as e:\n","        print(f\"Error recommending songs: {e}\")\n","        return None\n","\n","def main():\n","    file_path = 'songs_normalize.csv'\n","    df = load_data(file_path)\n","    if df is None:\n","        return  # Exit if there's an error loading data\n","\n","    df, df_features = preprocess_data(df)\n","    if df_features is None:\n","        return  # Exit if there's an error preprocessing\n","\n","    similarity_matrix = calculate_similarity(df_features)\n","    if similarity_matrix is None:\n","        return  # Exit if there's an error calculating similarity\n","\n","    while True:\n","        if input(\"Enter a song name (or 'exit' to quit): \").lower() == 'exit':\n","            break\n","        artist_name = input(\"Enter artist name (optional, press Enter to skip): \")\n","\n","        result = recommend_songs(input(\"Enter a song name (or 'exit' to quit): \"), artist_name, df, similarity_matrix)\n","        if result:\n","            selected_song, selected_artist, recommended_songs = result\n","            print(f\"\\nSelected Song: {selected_song} by {selected_artist}\")\n","            print(\"\\nRecommended Songs:\")\n","            for song, artist in recommended_songs:\n","                print(f\"- {song} by {artist}\")\n","        else:\n","            print(\"No recommendations found.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Lkz0z3wyMgkA"},"outputs":[],"source":[]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}